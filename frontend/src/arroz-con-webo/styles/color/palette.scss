/**
 * Author: Kalvin Garcia
 *
 * The main purpose of this is to establish a link between the CSS variables and the SCSS variables.
 * Obviously the syntax for the CSS variables is ugly and clunky when compared to SCSS, so using SCSS
 * for all the SCSS documents makes them prettier and much more readable to me. Then when they're compiled
 * The CSS variables will be preprocessed in essentially making the code readable when working on it, but
 * dynamic on the browser.
 */
@use "sass:map";

// default value for darkmode on site load and should be changed if user
// wants to have a different default using @use instead of @import
$dark-mode: false !default;

// Default colors for when user hasn't set the theme variables.
$egg-yellow: #CDAE32;
$broth-brown: #A67359;
$kidney-red: #A25D80;
$tomato-red: #BF4040;
$rice-pot-gray: #8C7380;

// Marking all of the variables to be usable like dark-mode
// If the user has a better method of making a color palette,
// then why not give them the ability to overwrite all of this.
$primary: var(--primary) !default;
$on-primary: var(--on-primary) !default;
$primary-container: var(--primary-container) !default;
$on-primary-container: var(--on-primary-container) !default;

$secondary: var(--secondary) !default;
$on-secondary: var(--on-secondary) !default;
$secondary-container: var(--secondary-container) !default;
$on-secondary-container: var(--on-secondary-container) !default;

$tertiary: var(--tertiary) !default;
$on-tertiary: var(--on-tertiary) !default;
$tertiary-container: var(--tertiary-container) !default;
$on-tertiary-container: var(--on-tertiary-container) !default;

$error: var(--error) !default;
$on-error: var(--on-error) !default;
$error-container: var(--error-container) !default;
$on-error-container: var(--on-error-container) !default;

$surface-lowest: var(--surface-lowest) !default;
$surface-lower: var(--surface-lower) !default;
$surface: var(--surface) !default;
$surface-higher: var(--surface-higher) !default;
$surface-highest: var(--surface-highest) !default;
$on-surface: var(--on-surface) !default;

/**
 * This function just returns the mapping for the initial color load of the site
 */
 @function get-mapping($mapping) {
    // on light mode these are the mappings
    $accent-lightness: 30%;
    $on-accent-lightness: 90%;
    $container-lightness: 80%;
    $on-container-lightness: 10%;

    $surface-lowest-lightness: 90%;
    $surface-lower-lightness: 88%;
    $surface-lightness: 86%;
    $surface-higher-lightness: 84%;
    $surface-highest-lightness: 80%;
    $on-surface-lightness: 10%;

    @if $dark-mode {
        // on dark mode these are the mappings
        $accent-lightness: 80%;
        $on-accent-lightness: 20%;
        $container-lightness: 30%;
        $on-container-lightness: 90%;

        $surface-lowest-lightness: 10%;
        $surface-lower-lightness: 14%;
        $surface-lightness: 16%;
        $surface-higher-lightness: 18%;
        $surface-highest-lightness: 20%;
        $on-surface-lightness: 90%; 
    }

    // returning the value necessary for the mapping
    @return map.get((
        "accent": $accent-lightness,
        "on-accent": $on-accent-lightness,
        "container": $container-lightness,
        "on-container": $on-container-lightness,
        
        "surface-lowest": $surface-lowest-lightness,
        "surface-lower": $surface-lower-lightness,
        "surface": $surface-lightness,
        "surface-higher": $surface-higher-lightness,
        "surface-highest": $surface-highest-lightness,
        "on-surface": $on-surface-lightness
    ), $mapping);
}

/**
 * getting the accurate tonal mapping based on the lightness returned by get-mapping
 */
 @function tonal-mapping($color, $mapping) {
    $value: get-mapping($mapping);

    $zero: adjust-color($color, $lightness: -100%);
    @return adjust-color($zero, $lightness: $value);
}

:root {
    /**
     * Coloring for theming inspired by Material Design Guidelines.
     * 
     * Generally the user will be able to just overwrite these there own way by default,
     * since JavaScript can be used to overwrite them anyway they deem necessary.
     */
    // primary key color variants
    --primary: #{tonal-mapping($egg-yellow, "accent")};
    --on-primary: #{tonal-mapping($egg-yellow, "on-accent")};
    --primary-container: #{tonal-mapping($egg-yellow, "container")};
    --on-primary-container: #{tonal-mapping($egg-yellow, "on-container")};

    // secondary key color variants
    --secondary: #{tonal-mapping($broth-brown, "accent")};
    --on-secondary: #{tonal-mapping($broth-brown, "on-accent")};
    --secondary-container: #{tonal-mapping($broth-brown, "container")};
    --on-secondary-container: #{tonal-mapping($broth-brown, "on-container")};

    // tertiary key color variants
    --tertiary: #{tonal-mapping($kidney-red, "accent")};
    --on-tertiary: #{tonal-mapping($kidney-red, "on-accent")};
    --tertiary-container: #{tonal-mapping($kidney-red, "container")};
    --on-tertiary-container: #{tonal-mapping($kidney-red, "on-container")};

    // error key color variants
    --error: #{tonal-mapping($tomato-red, "accent")};
    --on-error: #{tonal-mapping($tomato-red, "on-accent")};
    --error-container: #{tonal-mapping($tomato-red, "container")};
    --on-error-container: #{tonal-mapping($tomato-red, "on-container")};

    // neutral color variants    
    --surface-lowest: #{tonal-mapping($rice-pot-gray, "surface-lowest")};
    --surface-lower: #{tonal-mapping($rice-pot-gray, "surface-lower")};
    --surface: #{tonal-mapping($rice-pot-gray, "surface")};
    --surface-higher: #{tonal-mapping($rice-pot-gray, "surface-higher")};
    --surface-highest: #{tonal-mapping($rice-pot-gray, "surface-highest")};
    --on-surface: #{tonal-mapping($rice-pot-gray, "on-surface")};
}
